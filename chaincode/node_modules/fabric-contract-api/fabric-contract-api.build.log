Invoking: npm run lint && npm run test:unit && npm run test:schema 


> fabric-contract-api@2.2.3 lint /home/vsts/work/1/s/apis/fabric-contract-api
> eslint ./lib/


> fabric-contract-api@2.2.3 test:unit /home/vsts/work/1/s/apis/fabric-contract-api
> npm run test


> fabric-contract-api@2.2.3 test /home/vsts/work/1/s/apis/fabric-contract-api
> nyc mocha --recursive 'test/unit/**/*.js' 2>&1

Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating
Browserslist: caniuse-lite is outdated. Please run:
  npx browserslist@latest --update-db
  Why you should do it regularly: https://github.com/browserslist/browserslist#browsers-data-updating


  Default.js
    Default
2022-05-03T10:10:15.309Z info [c-api:./lib/annotations/default.js]                @Default args: "Target ->","mockTarget" 
      ✔ should add set value for default when none set
2022-05-03T10:10:15.314Z info [c-api:./lib/annotations/default.js]                @Default args: "Target ->","mockTarget" 
      ✔ should error when default already set

  Info.js
    Info
2022-05-03T10:10:15.316Z info [c-api:./lib/annotations/info.js]                   @Info args: "Info -> [object Object],","Target ->","steve" 
      ✔ should add object as key when no objects exist for global yet
2022-05-03T10:10:15.318Z info [c-api:./lib/annotations/info.js]                   @Info args: "Info -> [object Object],","Target ->","steve" 
      ✔ should add object as key when objects exist for global
    Info with data
2022-05-03T10:10:15.319Z info [c-api:./lib/annotations/info.js]                   @Info args: "Info -> [object Object],","Target ->","steve" 
      ✔ should add object as key when no objects exist for global yet
2022-05-03T10:10:15.320Z info [c-api:./lib/annotations/info.js]                   @Info args: "Info -> [object Object],","Target ->","steve" 
      ✔ should add object as key when objects exist for global

  Object.js
    #Object
2022-05-03T10:10:15.322Z info [c-api:./lib/annotations/object.js]                 @Object args: Target -> %s "Function" 
      ✔ should add object as key when no objects exist for global yet
2022-05-03T10:10:15.324Z info [c-api:./lib/annotations/object.js]                 @Object args: Target -> %s "Function" 
      ✔ should add object as key when objects exist for global
2022-05-03T10:10:15.325Z info [c-api:./lib/annotations/object.js]                 @Object args: Target -> %s "Function" 
      ✔ should add object with no supertype
2022-05-03T10:10:15.326Z info [c-api:./lib/annotations/object.js]                 @Object args: Target -> %s "Function" 
      ✔ should add object with no supertype, and no expected subtypes
    #Property
      ✔ should use the type and name passed
      ✔ should handle the reflected type being a function when type not passed
      ✔ should handle the reflected type being a function when type not passed

  Transaction.js
    Transaction
2022-05-03T10:10:15.333Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> true,","Target ->","Object" 
      ✔ should handle existing transactions
2022-05-03T10:10:15.335Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> true,","Target ->","Object" 
      ✔ should error if missing type
2022-05-03T10:10:15.337Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> true,","Target ->","Object" 
      ✔ should handle existing transactions of which matches name and already has param metadata
2022-05-03T10:10:15.339Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> true,","Target ->","Object" 
      ✔ should create new metadata for fabric:transactions if none exist and handle no params
2022-05-03T10:10:15.340Z info [c-api:./lib/annotations/transaction.js]            @Transaction args: "Property Key -> mockKey, Commit -> false,","Target ->","Object" 
      ✔ should not add a tag if commit is false
    Returns
2022-05-03T10:10:15.346Z info [c-api:./lib/annotations/transaction.js]            @Returns args: ", Property Key -> mockKey, Return Type -> someType,","Target ->","Object" 
      ✔ should handle existing transactions
2022-05-03T10:10:15.347Z info [c-api:./lib/annotations/transaction.js]            @Returns args: ", Property Key -> mockKey, Return Type -> someType,","Target ->","Object" 
      ✔ should handle when there are no existing transactions
    Param
2022-05-03T10:10:15.349Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description,","Target ->","Object" 
      ✔ should overwrite when the transaction exists and param of name already in
2022-05-03T10:10:15.351Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description,","Target ->","Object" 
      ✔ should overwrite existing transaction but add new param when one with name does not exist
2022-05-03T10:10:15.353Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description,","Target ->","Object" 
      ✔ should append to transaction a new parameters array when transaction exists but has not parameters field
2022-05-03T10:10:15.354Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> some description,","Target ->","Object" 
      ✔ should handle when no transaction exists
2022-05-03T10:10:15.356Z info [c-api:./lib/annotations/transaction.js]            @Param args: "Property Key -> mockKey, Param Name -> some param, Param Type -> some type, Description -> undefined,","Target ->","Object" 
      ✔ should handle when no description passed

  utils
    appendOrUpdate
      ✔ should push a new object into array made up of data passed if none existing with id
      ✔ should update existing object with data if id exists
    findByValue
      ✔ should return the element in the array with the passed value in the passed field
      ✔ should return null if no element has the passed value for the passed field
    generateSchema
      ✔ should return a primitive type
      ✔ should return a primitive type as lowercase
      ✔ should return a ref path for a non array and non primitive type
      ✔ should return a ref path for a non array and non primitive type and not use full path
      ✔ should recurse for array types
      ✔ should recurse for map types

  contract.js
    #constructor
      ✔ should create plain object ok
      ✔ should have set* methods

  contract.js
    #constructor
      ✔ should create with default name
2022-05-03T10:10:15.364Z error [c-api:./lib/contract.js]                          [some id] Contract contract-api.Contract unknown transaction "wibble", 
      ✔ should have default unknownTx fn
      ✔ should create with the name specified
      ✔ should call the default before/after functions
      ✔ should call the default createContext functions
      ✔ should set the __isContract value
    _isContract
      ✔ should return true when class is a contract
      ✔ should return true when class is not a contract
      ✔ should return true when class is not instanceOf contract but does have __isContract true
    subclass specific functioning
      ✔ should set the correct name
      ✔ should call the correct subclassed fns

  jsontransactionserializer.js
    #constructor
      ✔ should create plain object ok
    #toBuffer
      ✔ should return undefined if nothing passed in (no schema) 
      ✔ should return string from a string in result if schema given
      ✔ should return number from a number in result if schema given
2022-05-03T10:10:15.373Z error [c-api:./lib/jsontransactionserializer.js]         undefined toBuffer validation against schema failed on type "number","string" 
      ✔ should throw an error if the type of data passed does not match schema given
      ✔ should handle booleans
      ✔ should return string from a string in result if JS can tell
      ✔ should return number from a number in result if JS can tell
      ✔ should handle generic object
      ✔ should handle array of strings
      ✔ should handle array of objects
    #fromBuffer:obects
      ✔ Fully speced object
      ✔ Generic object - no type specificed
    #fromBuffer:primitives
2022-05-03T10:10:15.379Z error [c-api:./lib/jsontransactionserializer.js]         undefined fromBuffer no data supplied  
      ✔ should throw an error if nothing given
      ✔ should throw an error if not a number
      ✔ should throw an error if bad boolean given
2022-05-03T10:10:15.381Z error [c-api:./lib/jsontransactionserializer.js]         fromBuffer could not parse data as JSON to allow it to be converted to type: "some type" "trie",{} 
2022-05-03T10:10:15.381Z error [c-api:./lib/jsontransactionserializer.js]         Converting data to string and JSON.stringify-ing  
      ✔ should do cope with bad input and simply tostring if bad JSON used for non string or number type
      ✔ should handle specific String case
      ✔ should handle specific Number case
      ✔ should handle specific Boolean case
      ✔ should handle specific Number case
      ✔ should handle booleans
      ✔ should handle stuff that is really vague
      ✔ should handle buffer that is really vague
      ✔ should handle errors of unkown type
      ✔ should handle array of strings
      ✔ should handle array of objects

  Logger
    ✔ coverage
2022-05-03T10:10:15.394Z error [c-api:_]                                          Unhandled Rejection reason __PERMITTED__ promise Promise { <rejected> '__PERMITTED__' }  
2022-05-03T10:10:15.394Z error [c-api:_]                                          Unhandled Rejection reason __PERMITTED__ promise Promise { <rejected> '__PERMITTED__' }  
    getLogger
      ✔ should create a new logger name unknown
      ✔ should return existing logger if known name used
      ✔ should set the log level to fatal when env var set to CRITICAL
      ✔ should set the log level to error when env var set to ERROR
      ✔ should set the log level to warn when env var set to WARNING
      ✔ should set the log level to debug when env var set to DEBUG
    setLevel
      ✔ should update the loggers to be the level passed in
    formatter
      ✔ anonymous logger
      ✔ named logger


  85 passing (94ms)


=============================== Coverage summary ===============================
Statements   : 100% ( 335/335 )
Branches     : 100% ( 157/157 )
Functions    : 100% ( 55/55 )
Lines        : 100% ( 332/332 )
================================================================================

> fabric-contract-api@2.2.3 test:schema /home/vsts/work/1/s/apis/fabric-contract-api
> ajv compile -s ./schema/contract-schema.json && ajv validate -s ./schema/contract-schema.json -d ./schema/example-full.json

schema ./schema/contract-schema.json is valid
./schema/example-full.json valid
